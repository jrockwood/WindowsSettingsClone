// ---------------------------------------------------------------------------------------------------------------------
// <copyright file="ServiceCommand.CreateCommand.cs" company="Justin Rockwood">
//   Copyright (c) Justin Rockwood. All Rights Reserved. Licensed under the Apache License, Version 2.0. See
//   LICENSE.txt in the project root for license information.
// </copyright>
// ---------------------------------------------------------------------------------------------------------------------

// DO NOT MODIFY THIS FILE DIRECTLY. It is autogenerated from ServiceCommand.CreateCommand.tt.

namespace WindowsSettingsClone.Shared.CommandBridge
{
    using System;
    using Commands;
    using ServiceContracts.CommandBridge;

    public partial class ServiceCommand
    {
        private static IServiceCommand CreateCommand(BridgeMessageDeserializer deserializer)
        {
            IServiceCommand command;

            switch (deserializer.CommandName)
            {
                case ServiceCommandName.Echo:
                    command = new EchoCommand(deserializer);
                    break;

                case ServiceCommandName.FileCopy:
                    command = new FileCopyCommand(deserializer);
                    break;

                case ServiceCommandName.RegistryReadIntValue:
                    command = new RegistryReadIntValueCommand(deserializer);
                    break;

                case ServiceCommandName.RegistryReadStringValue:
                    command = new RegistryReadStringValueCommand(deserializer);
                    break;

                case ServiceCommandName.RegistryWriteIntValue:
                    command = new RegistryWriteIntValueCommand(deserializer);
                    break;

                case ServiceCommandName.RegistryWriteStringValue:
                    command = new RegistryWriteStringValueCommand(deserializer);
                    break;

                case ServiceCommandName.ShutdownServer:
                    command = new ShutdownServerCommand(deserializer);
                    break;

                case ServiceCommandName.SystemParametersInfoGetValue:
                    command = new SystemParametersInfoGetValueCommand(deserializer);
                    break;

                case ServiceCommandName.SystemParametersInfoSetValue:
                    command = new SystemParametersInfoSetValueCommand(deserializer);
                    break;

                case ServiceCommandName.Unknown:
                default:
                    throw new InvalidOperationException(
                        "This should be unreachable because the deserializer should have detected an invalid command name");
            }

            return command;
        }
    }
}
