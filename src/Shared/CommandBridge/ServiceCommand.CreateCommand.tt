<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#
    string xmlPath = this.Host.ResolvePath(@"..\..\ServiceContracts\Commands\Commands.xml");
    var root = XElement.Load(xmlPath);
#>
// ---------------------------------------------------------------------------------------------------------------------
// <copyright file="<#= Path.GetFileNameWithoutExtension(Host.TemplateFile) #>.cs" company="Justin Rockwood">
//   Copyright (c) Justin Rockwood. All Rights Reserved. Licensed under the Apache License, Version 2.0. See
//   LICENSE.txt in the project root for license information.
// </copyright>
// ---------------------------------------------------------------------------------------------------------------------

// DO NOT MODIFY THIS FILE DIRECTLY. It is autogenerated from <#= Path.GetFileName(Host.TemplateFile) #>.

namespace WindowsSettingsClone.Shared.CommandBridge
{
    using System;
    using Commands;
    using ServiceContracts.CommandBridge;

    public partial class ServiceCommand
    {
        private static IServiceCommand CreateCommand(BridgeMessageDeserializer deserializer)
        {
            IServiceCommand command;

            switch (deserializer.CommandName)
            {
<#
    foreach (var commandElement in root.Descendants("command"))
    {
        string commandName = commandElement.Attribute("name")?.Value ?? "Unknown";
#>
                case ServiceCommandName.<#= commandName #>:
                    command = new <#= commandName #>Command(deserializer);
                    break;

<#
    }
#>
                case ServiceCommandName.Unknown:
                default:
                    throw new InvalidOperationException(
                        "This should be unreachable because the deserializer should have detected an invalid command name");
            }

            return command;
        }
    }
}
