<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#
    string xmlPath = this.Host.ResolvePath(@"..\Commands\Commands.xml");
    var root = XElement.Load(xmlPath);

    foreach (XElement command in root.Descendants("command"))
    {
        string commandName = (string)command.Attribute("name");
        string commandDescription = command.Attribute("description")?.Value ?? string.Empty;
        string interfaceName = $"I{commandName}Command";
        string fileName = $"{interfaceName}.cs";
#>
// ---------------------------------------------------------------------------------------------------------------------
// <copyright file="<#= fileName #>" company="Justin Rockwood">
//   Copyright (c) Justin Rockwood. All Rights Reserved. Licensed under the Apache License, Version 2.0. See
//   LICENSE.txt in the project root for license information.
// </copyright>
// ---------------------------------------------------------------------------------------------------------------------

// DO NOT MODIFY THIS FILE DIRECTLY. It is autogenerated from <#= Path.GetFileName(Host.TemplateFile) #>.

namespace WindowsSettingsClone.ServiceContracts.Commands
{
    using CommandBridge;

    /// <summary>
    /// <#= commandDescription #>
    /// </summary>
    public interface <#= interfaceName #> : IServiceCommand
    {
<#
        foreach (XElement @param in command.Descendants("param"))
        {
            string paramName = (string)@param.Attribute("name");
            string typeName = (string)@param.Attribute("type");
#>
        <#= typeName #> <#= paramName #> { get; }
<#
        }
#>
    }
}
<#
        SaveOutput(fileName);
    }
#>

<#+
private void SaveOutput(string fileName)
{
    string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
    string outputFilePath = Path.Combine(templateDirectory, fileName);
    File.WriteAllText(outputFilePath, GenerationEnvironment.ToString());
    GenerationEnvironment.Remove(0, GenerationEnvironment.Length);
}
#>
